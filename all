//c-Program to validate identifier
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
void main()
{
int i=0,state=1;
char input[20];
printf("\nenter the identifier:");
scanf("%s",input);
while(state==1||state==2)
{
    switch(state)
    {
        case 1:if(isalpha(input[i]))
               {
                   i++;
                   state=2;
               }
               else
                state=4;
                
               break;
        case 2:if(isalpha(input[i])||isdigit(input[i]))
               {
                   i++;
                   state=2;
               }
               else
                state=3;
                
               break;
    }
}
if(state==3)
 printf("\nvalid identifier");
else
 printf("\ninvalid identifier");
}

---------------------------

//lex program to identify reserved words,identifier,operators

letter [a-zA-Z]
digit [0-9]
aop [+ - = / *]
rop <|<=|>|>=|==|!=
lop &&|[||]|!
bop &|<<|>>|^|[|]
idop [++]{2}|[--]{2}
special "."|","|"$"
%%
auto|break|if|else|char|int  { printf("reserved words");}
{letter}({letter}|{digit})*  { printf("valid identifier");}
{digit}({letter}|{digit})*  { printf("invalid identifier");}
{aop}  { printf("arithmetic operator");}
{rop} { printf("relational operator");}
{lop} { printf("logical operator");}
{bop} { printf("bitwise operator");}
{idop} { printf("incr decr operator");}
[=]  { printf("assignment operator");}
%%

int main()
{
    yylex();
}
------------------------------------------------
//BRUTE FORCE
//s=>cAd  A=>ab/a
//s=>cAd  A=>a/ab
#include<stdio.h>
int A();
int i=0,isave;
char input[10];
int s()
{
    if(input[i]=='c')
    {
        i++;
        if(A())
        {
            if(input[i]=='d')
            {
                i++;
                return 1;
            }
        }
    }
}
int A()
{
int isave=i;    
if(input[i]=='a')
{
    i++;
    if(input[i]=='b')
    {
        i++;
        return 1;
    }
}
i=isave;
if(input[i]=='a')
{
    i++;
    return 1;
}
}

int main()
{
    
    printf("\nenter the string:");
    scanf("%s",input);
    int i=s();
    if(i==1)
     printf("\nstring accepted");
    else
     printf("\nstring not accepted");
}

-----------------------------------------------------
//RD-PARSER WITH BACKTRACKING
//s=>aSa/aa
#include<stdio.h>
int s();
int i=0,isave;
char input[10];
int s()
{
    int isave=i;
    if(input[i]=='a')
    {
        i++;
        if(s())
        {
            if(input[i]=='a')
            {
                i++;
                return 1;
            }
        }
    }
    i=isave;
    if(input[i]=='a')
    {
        i++;
        if(input[i]=='a')
        {
            i++;
            return 1;
        }
    }
}

int main()
{
    printf("\nenter the string with $:");
    scanf("%s",input);
    if(s())
    {
        if(input[i]=='$')
          printf("\naccepted");
        else
          printf("\nnot accepted");
    }
}


-----------------------------------------------
//RD-PARSER
#include<stdio.h>
#include<string.h>
#include<ctype.h>
int i=0;
char input[10];
int E()
{
    T();
    EPrime();
}
int EPrime()
{
    if(input[i]=='+')
    {
        i++;
        T();
        EPrime();
    }
}
int T()
{
    F();
    TPrime();
}
int TPrime()
{
    if(input[i]=='*')
    {
        i++;
        F();
        TPrime();
    }
}
int F()
{
    if(input[i]=='(')
    {
        i++;
        E();
        if(input[i]==')')
        {
            i++;
        }
    }
    else 
    {
        if(input[i]=='i')
          i++;
    }
}
int main()
{
    // char input[10];
    printf("\nenter the string with $:");
    scanf("%s",input);
    E();
    if(input[i]=='$')
      printf("\naccept");
    else
     printf("\nnot accept");
    
}
-----------------------------------------------------

//LL1 PARSER
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int ip=0;
int top=-1;
char stk[20];
char input[20];
void push(char a);
void pop();
void display();
void ipdisplay();

void main()
{
int flag=0;
printf("\nenter the identifier with $:");
scanf("%s",input);
push('$');
push('E');
printf("\nStack-contents            i/pdata");

while(1)
{
display();
printf("------------");
ipdisplay();
printf("\n");

if(stk[top]=='$'&&input[ip]=='$')
{
    flag=-1;
    printf("\nSuccess");
    break;
}
else if(stk[top]==input[ip])
{
    pop();
    ip++;
    // printf("\n");
}
else if(stk[top]=='E')
{
    if(input[ip]=='i'||input[ip]=='(')
    {
        pop();
        push('A');
        push('T');
    }
    else
     break;
}
else if(stk[top]=='A')
{
    if(input[ip]==')'||input[ip]=='$')
    {
        pop();
    }
    else if(input[ip]=='+')
    {
        pop();
        push('A');
        push('T');
        push('+');
    }
    else
     break;
}
else if(stk[top]=='T')
{
    if(input[ip]=='i'||input[ip]=='(')
    {
        pop();
        push('B');
        push('F');
    }
    else
     break;
}
else if(stk[top]=='B')
{
    if(input[ip]=='+'||input[ip]==')'||input[ip]=='$')
    {
        pop();
    }
    else if(input[ip]=='*')
    {
        pop();
        push('B');
        push('F');
        push('*');
    }
    else
     break;
}
else if(stk[top]=='F')
{
    if(input[ip]=='i')
    {
        pop();
        push('i');
    }
    else if(input[ip]=='(')
    {
        pop();
        push(')');
        push('E');
        push('(');
    }
    else
     break;
}
else
{
    if(flag==0)
     printf("\n not parsed");
}
}

}

void push(char a)
{
    if(top==20)
    {
        printf("\nstack full");
        exit(0);
    }
    else
    {
        top++;
        stk[top]=a;
    }
}
void pop()
{
    if(top==-1)
    {
        printf("\nstack empty");
        exit(0);
    }
    else
    {
        top--;
    }
}

void display()
{
    int i;
    for(i=0;i<=top;i++)
    {
        printf("%c",stk[i]);
    }
}
void ipdisplay()
{
    int i;
    for(i=0;input[i]!='\0';i++)
    {
        printf("%c",input[i]);
    }
}

------------------------------------------
//SLR
#include<stdio.h>
#include<stdlib.h>
char arr[20],stack[20];
int ip,top=-1;
void error(){
    printf("\nerror occured\n");
    exit(0);
}
void disp(){
    for(int i =0;i<=top;i++)
        printf("%c",stack[i]);
}
void ipdisp(){
    for(int i =ip;arr[i]!='\0';i++)
        printf("%c",arr[i]);
}
void push(char c){
    if(top>=20){
        printf("\n Stack is full overflow \n");
        exit(0);
    }
    else{
        top++;
        stack[top]=c;
    }
}
void pop(){
    if(top<0){
        printf("\n Stack is Empty  Underflow \n");
        exit(0);
    }
    else{
        top--;
    }
}
void red(int r)
{
    //poping
    if(r==1||r==3||r==5){
        pop();
        pop();
        pop();
        pop();
        pop();
        pop();
    }
    else{
        pop();
        pop();
    }
    //pushing
    if(r==1||r==2){
        push('E');
        if(stack[top-1]=='0')
            push('1');
        else if(stack[top-1]=='4')
            push('8');
        else
            error();
    }
    else if(r==3||r==4){
        push('T');
        if(stack[top-1]=='0'||stack[top-1]=='4')
            push('2');
        else if(stack[top-1]=='6')
            push('9');
        else
            error();
    }
    else if(r==5||r==6){
        push('F');
        if(stack[top-1]=='0'||stack[top-1]=='4'||stack[top-1]=='6')
            push('3');
        else if(stack[top-1]=='7'||stack[top]=='4')
            push('@');
        else
            error();
    }
}
void parser(){
    //push('$');
    push('0');
    printf("\nStack contents------------input data\n");
    while(1){
        disp();
        printf("----------------------------");
        ipdisp();
        printf("\n");
        switch (stack[top])
        {
        case '0':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '1':if(arr[ip]=='+'){
                    push('+');
                    push('6');
                    ip++;
                }
                else if(arr[ip]=='$'){
                    printf("\nSucessfully parsed\n");
                    exit(0);
                }
                else
                    error();
            break;
        case '2':if(arr[ip]=='*'){
                    push('*');
                    push('7');
                    ip++;
                }
                else if(arr[ip]=='+'||arr[ip]==')'||arr[ip]=='$'){
                    red(2);
                }
                else
                    error();
            break;
        case '3':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(4);
                }
                else
                    error();
            break;
        case '4':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '5':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(6);
                }
                else
                    error();
            break;
        case '6':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '7':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '8':if(arr[ip]=='+'){
                    push('+');
                    push('6');
                    ip++;
                }
                else if(arr[ip]==')'){
                    push(')');
                    push('#');
                    ip++;
                }
                else
                    error();
            break;
        case '9':if(arr[ip]=='*'){
                    push('*');
                    push('7');
                    ip++;
                }
                else if(arr[ip]=='+'||arr[ip]==')'||arr[ip]=='$'){
                    red(1);
                }
                else
                    error();
            break;
        case '@':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(3);
                }
                else
                    error();
            break;
        case '#':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(5);
                }
                else
                    error();
            break;
        default:
            break;
        }
    }
}
void main(){
    int flag=0;
    printf("\nEnter the input ending with $\n");
    scanf("%s",arr);
    parser();
}















